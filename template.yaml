AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  # DynamoDB Table to store log entries
  LogEntriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: LogEntries
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # IAM Role for Lambda functions to access DynamoDB
  LogServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBReadWriteAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${LogEntriesTable}

  # Lambda function to save log entries
  SaveLogFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: log_service.app.save_logs
      Runtime: python3.12
      CodeUri: ./log_service
      Timeout: 300
      Environment:
        Variables:
          TABLE_NAME: !Ref LogEntriesTable
      Role: !GetAtt LogServiceRole.Arn
      Events:
        SaveLogAPI:
          Type: Api
          Properties:
            Path: /savelogs
            Method: post
            RestApiId: !Ref LogServiceAPI  # Reference to the API Gateway

  # Lambda function to retrieve log entries
  GetLogsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: log_service.app.get_logs
      Runtime: python3.12
      CodeUri: ./log_service
      Timeout: 300
      Environment:
        Variables:
          TABLE_NAME: !Ref LogEntriesTable
      Role: !GetAtt LogServiceRole.Arn
      Events:
        GetLogsAPI:
          Type: Api
          Properties:
            Path: /getlogs
            Method: get
            RestApiId: !Ref LogServiceAPI  # Reference to the API Gateway

  # API Gateway definition
  LogServiceAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for the log service"
    Value: !Sub "https://${LogServiceAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod"
